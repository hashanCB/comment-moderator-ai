{"version":3,"file":"index.esm.js","sources":["../src/hook/index.ts","../src/api/index.ts"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\nconst debounce = require('lodash.debounce');\nimport type { CommentCheckResponse } from '../api';\n\ninterface CommentCheckOptions {\n  context?: string;\n  threshold?: number;\n  debounceMs?: number;\n  apiEndpoint?: string;\n}\n\nexport function useCommentCheck(options: CommentCheckOptions = {}) {\n  const {\n    context = '',\n    threshold = 0.7,\n    apiEndpoint = '/api/check-comment',\n    debounceMs = 500\n  } = options;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [result, setResult] = useState<CommentCheckResponse | null>(null);\n  const contextRef = useRef(context);\n  const debouncedFnRef = useRef<((text: string) => void) | null>(null);\n\n  // Update context if it changes\n  useEffect(() => {\n    contextRef.current = context;\n  }, [context]);\n\n  const checkComment = useCallback(async (commentText: string) => {\n    if (!commentText?.trim()) {\n      setResult({\n        approved: false,\n        reason: 'Comment cannot be empty',\n        confidence: 0\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          comment: commentText,\n          context: contextRef.current,\n          threshold\n        })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.reason || 'Failed to check comment');\n      }\n\n      const result = {\n        ...data,\n        stats: {\n          length: commentText.length,\n          words: commentText.trim().split(/\\s+/).length\n        }\n      };\n\n      setResult(result);\n      return result;\n    } catch (err) {\n      console.error('Error checking comment:', err);\n      setResult({\n        approved: false,\n        reason: 'Failed to check comment. Please try again.',\n        confidence: 0\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [apiEndpoint, threshold]);\n\n  // Initialize debounced function\n  useEffect(() => {\n    const debouncedFn = debounce(async (text: string) => {\n      await checkComment(text);\n    }, debounceMs);\n\n    debouncedFnRef.current = debouncedFn;\n\n    return () => {\n      if (debouncedFnRef.current) {\n        // @ts-ignore - debounce types don't include cancel\n        debouncedFnRef.current.cancel?.();\n      }\n    };\n  }, [checkComment, debounceMs]);\n\n  const debouncedCheck = useCallback((text: string) => {\n    if (!text) return;\n    debouncedFnRef.current?.(text);\n  }, []);\n\n  return {\n    isLoading,\n    result,\n    checkComment,\n    debouncedCheck\n  };\n}\n","\n\nexport interface CommentCheckRequest {\n  comment: string;\n  context?: string;\n  threshold?: number;\n}\n\nexport interface CommentCheckResponse {\n  approved: boolean;\n  reason: string;\n  confidence: number;\n}\n\nexport class CommentChecker {\n  private apiKey: string;\n\n  constructor(apiKey: string, private model: string = 'deepseek/deepseek-chat-v3-0324:free') {\n    if (!apiKey) {\n      throw new Error('OpenRouter API key is required');\n    }\n    this.apiKey = apiKey;\n  }\n\n  private escapePrompt(input: string): string {\n    return input.replace(/[\"\\\\]/g, '\\\\$&');\n  }\n\n  async checkComment({ comment, context = '', threshold = 0.7 }: CommentCheckRequest): Promise<CommentCheckResponse> {\n    try {\n      if (!comment?.trim()) {\n        return {\n          approved: false,\n          reason: 'Comment is required',\n          confidence: 0\n        };\n      }\n\n      const sanitizedContext = context.slice(0, 1000);\n      const prompt = sanitizedContext\n        ? `Context: ${this.escapePrompt(sanitizedContext)}\\n\\nModerate the following comment: \"${this.escapePrompt(comment)}\"\\n\\nConsider:\\n1. Is it appropriate and relevant to the context? (Yes/No)\\n2. Is it respectful and constructive? (Yes/No)\\n3. Does it contain harmful content? (Yes/No)\\n\\nConfidence threshold: ${threshold * 100}%\\n\\nRespond with:\\nAPPROVED: Yes/No\\nREASON: <detailed reason>\\nCONFIDENCE: <score between 0-1>`\n        : `Moderate the following comment: \"${this.escapePrompt(comment)}\"...`;\n\n      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n          'HTTP-Referer': 'https://github.com/livehashan/comment-check',\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: [\n            {\n              role: 'system',\n              content: 'You are a comment moderation assistant. Analyze comments and respond in the exact format: APPROVED: Yes/No\\nREASON: <reason>\\nCONFIDENCE: <0-1>'\n            },\n            {\n              role: 'user',\n              content: prompt\n            }\n          ],\n          temperature: 0.3\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get response from OpenRouter');\n      }\n\n      const data = await response.json();\n      const content = data.choices[0]?.message?.content;\n\n      if (!content) {\n        throw new Error('No response content from OpenRouter');\n      }\n\n      const lines = content.trim().split('\\n');\n      const approved = lines.find((line: string) => line.startsWith('APPROVED:'))?.split(':')[1]?.trim() === 'Yes';\n      const reason = lines.find((line: string) => line.startsWith('REASON:'))?.split(':')[1]?.trim() || 'No reason provided';\n      const confidence = parseFloat(lines.find((line: string) => line.startsWith('CONFIDENCE:'))?.split(':')[1]?.trim() || '0');\n\n      return { approved, reason, confidence };\n    } catch (error) {\n      console.error('Error:', error);\n      return {\n        approved: false,\n        reason: 'Service error',\n        confidence: 0\n      };\n    }\n  }\n}\n\n// Next.js route handler\nexport function createNextRouteHandler(apiKey: string, model?: string) {\n  const checker = new CommentChecker(apiKey, model);\n\n  return async function handler(req: Request) {\n    if (req.method !== 'POST') {\n      return new Response('Method not allowed', { status: 405 });\n    }\n\n    try {\n      const body = await req.json();\n      const result = await checker.checkComment(body);\n      return new Response(JSON.stringify(result), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (error) {\n      console.error('Error:', error);\n      return new Response(JSON.stringify({\n        approved: false,\n        reason: 'Service error',\n        confidence: 0\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  };\n}\n\n// Express middleware\nexport function createExpressMiddleware(apiKey: string, model?: string) {\n  const checker = new CommentChecker(apiKey, model);\n\n  return async function middleware(req: any, res: any) {\n    try {\n      const result = await checker.checkComment(req.body);\n      res.json(result);\n    } catch (error) {\n      console.error('Error:', error);\n      res.status(500).json({\n        approved: false,\n        reason: 'Service error',\n        confidence: 0\n      });\n    }\n  };\n}\n"],"names":[],"mappings":"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"}