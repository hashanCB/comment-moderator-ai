{"code":"import { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\nimport debounce from 'lodash.debounce';\r\nexport function useCommentCheck(options) {\r\n    var _this = this;\r\n    if (options === void 0) { options = {}; }\r\n    var _a = options.context, context = _a === void 0 ? '' : _a, _b = options.threshold, threshold = _b === void 0 ? 0.7 : _b, _c = options.apiEndpoint, apiEndpoint = _c === void 0 ? '/api/check-comment' : _c, _d = options.debounceMs, debounceMs = _d === void 0 ? 500 : _d;\r\n    var _e = useState(false), isLoading = _e[0], setIsLoading = _e[1];\r\n    var _f = useState(null), result = _f[0], setResult = _f[1];\r\n    var contextRef = useRef(context);\r\n    var debouncedFnRef = useRef(null);\r\n    // Update context if it changes\r\n    useEffect(function () {\r\n        contextRef.current = context;\r\n    }, [context]);\r\n    var checkComment = useCallback(function (commentText) { return __awaiter(_this, void 0, void 0, function () {\r\n        var response, data, err_1;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(commentText === null || commentText === void 0 ? void 0 : commentText.trim())) {\r\n                        setResult({\r\n                            approved: false,\r\n                            reason: 'Comment cannot be empty',\r\n                            confidence: 0\r\n                        });\r\n                        return [2 /*return*/];\r\n                    }\r\n                    setIsLoading(true);\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 4, 5, 6]);\r\n                    return [4 /*yield*/, fetch(apiEndpoint, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': 'application/json' },\r\n                            body: JSON.stringify({\r\n                                comment: commentText,\r\n                                context: contextRef.current,\r\n                                threshold: threshold\r\n                            })\r\n                        })];\r\n                case 2:\r\n                    response = _a.sent();\r\n                    if (!response.ok) {\r\n                        throw new Error('Failed to check comment');\r\n                    }\r\n                    return [4 /*yield*/, response.json()];\r\n                case 3:\r\n                    data = _a.sent();\r\n                    setResult(__assign(__assign({}, data), { stats: {\r\n                            length: commentText.length,\r\n                            words: commentText.trim().split(/\\s+/).length\r\n                        } }));\r\n                    return [2 /*return*/, data];\r\n                case 4:\r\n                    err_1 = _a.sent();\r\n                    console.error('Error checking comment:', err_1);\r\n                    setResult({\r\n                        approved: false,\r\n                        reason: 'Failed to check comment. Please try again.',\r\n                        confidence: 0\r\n                    });\r\n                    return [3 /*break*/, 6];\r\n                case 5:\r\n                    setIsLoading(false);\r\n                    return [7 /*endfinally*/];\r\n                case 6: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); }, [apiEndpoint, threshold]);\r\n    // Initialize debounced function\r\n    useEffect(function () {\r\n        var debouncedFn = debounce(function (text) { return __awaiter(_this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, checkComment(text)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); }, debounceMs);\r\n        debouncedFnRef.current = debouncedFn;\r\n        return function () {\r\n            var _a, _b;\r\n            if (debouncedFnRef.current) {\r\n                // @ts-ignore - debounce types don't include cancel\r\n                (_b = (_a = debouncedFnRef.current).cancel) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n            }\r\n        };\r\n    }, [checkComment, debounceMs]);\r\n    var debouncedCheck = useCallback(function (text) {\r\n        var _a;\r\n        if (!text)\r\n            return;\r\n        (_a = debouncedFnRef.current) === null || _a === void 0 ? void 0 : _a.call(debouncedFnRef, text);\r\n    }, []);\r\n    return {\r\n        isLoading: isLoading,\r\n        result: result,\r\n        checkComment: checkComment,\r\n        debouncedCheck: debouncedCheck\r\n    };\r\n}\r\n","references":["/Users/Hashan/Documents/untitled folder/aicomment/comment-check/node_modules/@types/react/ts5.0/index.d.ts","/Users/Hashan/Documents/untitled folder/aicomment/comment-check/node_modules/@types/lodash.debounce/index.d.ts","/Users/Hashan/Documents/untitled folder/aicomment/comment-check/src/api/index.ts"]}
